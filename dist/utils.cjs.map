{"version":3,"sources":["../src/utils/index.ts"],"sourcesContent":["import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\n/**\n * Utility function to merge Tailwind CSS classes\n * Combines clsx and tailwind-merge for optimal class handling\n */\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n\n/**\n * Confirmation utility for user actions\n */\nexport const confirmAction = (message: string): boolean => {\n  return confirm(message);\n}\n\n/**\n * Helper to get nested values via dot notation\n */\nexport const getNested = (obj: any, path: string): any => {\n  if (!obj || !path) return undefined;\n  if (path.indexOf('.') === -1) return obj[path];\n  return path.split('.').reduce((acc, key) => (acc && acc[key] !== undefined ? acc[key] : undefined), obj);\n};\n\n/**\n * Format date for display\n */\nexport const formatDate = (date: string | Date, format: string = 'yyyy-MM-dd'): string => {\n  if (!date) return 'Not set';\n  const d = new Date(date);\n  if (isNaN(d.getTime())) return 'Invalid date';\n  \n  // Simple date formatting - can be enhanced with date-fns if needed\n  const year = d.getFullYear();\n  const month = String(d.getMonth() + 1).padStart(2, '0');\n  const day = String(d.getDate()).padStart(2, '0');\n  \n  return `${year}-${month}-${day}`;\n};\n\n/**\n * Format datetime for display\n */\nexport const formatDateTime = (datetime: string | Date): string => {\n  if (!datetime) return 'Not scheduled';\n  const d = new Date(datetime);\n  if (isNaN(d.getTime())) return 'Invalid datetime';\n  \n  return d.toISOString().replace('T', ' ').replace('.000Z', '');\n};\n\n/**\n * Generate unique ID\n */\nexport const generateId = (): string => {\n  return `ID_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n};\n\n/**\n * Debounce function\n */\nexport const debounce = <T extends (...args: any[]) => any>(\n  func: T,\n  wait: number\n): ((...args: Parameters<T>) => void) => {\n  let timeout: ReturnType<typeof setTimeout>;\n  return (...args: Parameters<T>) => {\n    clearTimeout(timeout);\n    timeout = setTimeout(() => func(...args), wait);\n  };\n};\n\n/**\n * Throttle function\n */\nexport const throttle = <T extends (...args: any[]) => any>(\n  func: T,\n  limit: number\n): ((...args: Parameters<T>) => void) => {\n  let inThrottle: boolean;\n  return (...args: Parameters<T>) => {\n    if (!inThrottle) {\n      func(...args);\n      inThrottle = true;\n      setTimeout(() => inThrottle = false, limit);\n    }\n  };\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAsC;AACtC,4BAAwB;AAMjB,SAAS,MAAM,QAAsB;AAC1C,aAAO,mCAAQ,kBAAK,MAAM,CAAC;AAC7B;AAKO,IAAM,gBAAgB,CAAC,YAA6B;AACzD,SAAO,QAAQ,OAAO;AACxB;AAKO,IAAM,YAAY,CAAC,KAAU,SAAsB;AACxD,MAAI,CAAC,OAAO,CAAC,KAAM,QAAO;AAC1B,MAAI,KAAK,QAAQ,GAAG,MAAM,GAAI,QAAO,IAAI,IAAI;AAC7C,SAAO,KAAK,MAAM,GAAG,EAAE,OAAO,CAAC,KAAK,QAAS,OAAO,IAAI,GAAG,MAAM,SAAY,IAAI,GAAG,IAAI,QAAY,GAAG;AACzG;AAKO,IAAM,aAAa,CAAC,MAAqB,SAAiB,iBAAyB;AACxF,MAAI,CAAC,KAAM,QAAO;AAClB,QAAM,IAAI,IAAI,KAAK,IAAI;AACvB,MAAI,MAAM,EAAE,QAAQ,CAAC,EAAG,QAAO;AAG/B,QAAM,OAAO,EAAE,YAAY;AAC3B,QAAM,QAAQ,OAAO,EAAE,SAAS,IAAI,CAAC,EAAE,SAAS,GAAG,GAAG;AACtD,QAAM,MAAM,OAAO,EAAE,QAAQ,CAAC,EAAE,SAAS,GAAG,GAAG;AAE/C,SAAO,GAAG,IAAI,IAAI,KAAK,IAAI,GAAG;AAChC;AAKO,IAAM,iBAAiB,CAAC,aAAoC;AACjE,MAAI,CAAC,SAAU,QAAO;AACtB,QAAM,IAAI,IAAI,KAAK,QAAQ;AAC3B,MAAI,MAAM,EAAE,QAAQ,CAAC,EAAG,QAAO;AAE/B,SAAO,EAAE,YAAY,EAAE,QAAQ,KAAK,GAAG,EAAE,QAAQ,SAAS,EAAE;AAC9D;AAKO,IAAM,aAAa,MAAc;AACtC,SAAO,MAAM,KAAK,IAAI,CAAC,IAAI,KAAK,OAAO,EAAE,SAAS,EAAE,EAAE,OAAO,GAAG,CAAC,CAAC;AACpE;AAKO,IAAM,WAAW,CACtB,MACA,SACuC;AACvC,MAAI;AACJ,SAAO,IAAI,SAAwB;AACjC,iBAAa,OAAO;AACpB,cAAU,WAAW,MAAM,KAAK,GAAG,IAAI,GAAG,IAAI;AAAA,EAChD;AACF;AAKO,IAAM,WAAW,CACtB,MACA,UACuC;AACvC,MAAI;AACJ,SAAO,IAAI,SAAwB;AACjC,QAAI,CAAC,YAAY;AACf,WAAK,GAAG,IAAI;AACZ,mBAAa;AACb,iBAAW,MAAM,aAAa,OAAO,KAAK;AAAA,IAC5C;AAAA,EACF;AACF;","names":[]}