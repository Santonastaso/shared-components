{"version":3,"sources":["../src/hooks/useErrorHandler.ts"],"sourcesContent":["import { useState, useCallback, useRef } from 'react';\n// Note: These would normally be imported from @andrea/shared-utils\n// For now using placeholder functions\nconst showError = (message: string) => console.error(message);\nconst showWarning = (message: string) => console.warn(message);\nconst showInfo = (message: string) => console.info(message);\nconst showSuccess = (message: string) => console.log(message);\nimport { ERROR_TYPES, type ErrorType } from '../constants';\n\ninterface ErrorHandlerOptions {\n  logErrors?: boolean;\n  showUserMessages?: boolean;\n  maxRetries?: number;\n  retryDelay?: number;\n  onError?: (error: any, context: string) => void;\n  onRetry?: (error: any, attempt: number, delay: number) => void;\n  onFallback?: (error: any) => void;\n}\n\ninterface AsyncErrorOptions extends ErrorHandlerOptions {\n  context?: string;\n  fallbackMessage?: string;\n  retry?: boolean;\n}\n\n/**\n * Unified Error Handling Hook\n * Provides comprehensive error handling capabilities for React components\n */\nexport const useErrorHandler = (options: ErrorHandlerOptions = {}) => {\n  const {\n    logErrors = true,\n    showUserMessages = true,\n    maxRetries = 3,\n    retryDelay = 1000,\n    onError = null,\n    onRetry = null,\n    onFallback = null\n  } = options;\n\n  const [errors, setErrors] = useState<any[]>([]);\n  const [isRetrying, setIsRetrying] = useState(false);\n  const retryCountRef = useRef(0);\n\n  /**\n   * Handle error with comprehensive error management\n   */\n  const handleError = useCallback(async (error: any, context = '', customOptions: any = {}) => {\n    // Create normalized error object\n    const normalizedError = {\n      id: `ERR_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      message: error.message || 'An unexpected error occurred',\n      type: error.type || ERROR_TYPES.SERVER_ERROR,\n      severity: error.severity || 'medium',\n      context,\n      timestamp: new Date().toISOString(),\n      userMessage: error.userMessage || error.message || 'An unexpected error occurred'\n    };\n\n    // Add to errors state\n    setErrors(prev => [...prev, normalizedError]);\n\n    // Log error if enabled\n    if (logErrors) {\n      console.error(`[${context}] Error:`, error);\n    }\n\n    // Show user message if enabled\n    if (showUserMessages) {\n      const message = normalizedError.userMessage;\n      \n      switch (normalizedError.severity) {\n        case 'low':\n          showWarning(message);\n          break;\n        case 'medium':\n          showError(message);\n          break;\n        case 'high':\n        case 'critical':\n          showError(message);\n          break;\n        default:\n          showError(message);\n      }\n    }\n\n    // Call custom error handler if provided\n    if (onError) {\n      await onError(normalizedError, context);\n    }\n\n    return normalizedError;\n  }, [logErrors, showUserMessages, onError]);\n\n  /**\n   * Handle async operations with automatic retry\n   */\n  const handleAsync = useCallback(async (\n    asyncOperation: () => Promise<any>, \n    options: AsyncErrorOptions = {}\n  ) => {\n    const {\n      context = '',\n      fallbackMessage = 'Operation failed',\n      retry = false,\n      maxRetries: customMaxRetries = maxRetries\n    } = options;\n\n    try {\n      if (retry) {\n        return await retryOperation(asyncOperation, customMaxRetries);\n      }\n      return await asyncOperation();\n    } catch (error) {\n      const handledError = await handleError(error, context, { fallbackMessage });\n      throw handledError;\n    }\n  }, [maxRetries, handleError]);\n\n  /**\n   * Retry operation with exponential backoff\n   */\n  const retryOperation = useCallback(async (\n    operation: () => Promise<any>,\n    maxAttempts: number\n  ) => {\n    let lastError: any;\n    \n    for (let attempt = 1; attempt <= maxAttempts; attempt++) {\n      try {\n        setIsRetrying(attempt > 1);\n        retryCountRef.current = attempt - 1;\n        \n        const result = await operation();\n        setIsRetrying(false);\n        retryCountRef.current = 0;\n        return result;\n      } catch (error) {\n        lastError = error;\n        \n        if (attempt < maxAttempts) {\n          const delay = retryDelay * Math.pow(2, attempt - 1); // Exponential backoff\n          \n          if (onRetry) {\n            await onRetry(error, attempt, delay);\n          }\n          \n          if (showUserMessages) {\n            showInfo(`Retrying... (${attempt}/${maxAttempts})`);\n          }\n          \n          await new Promise(resolve => setTimeout(resolve, delay));\n        }\n      }\n    }\n    \n    setIsRetrying(false);\n    retryCountRef.current = 0;\n    throw lastError;\n  }, [retryDelay, onRetry, showUserMessages]);\n\n  /**\n   * Handle specific error types\n   */\n  const handleValidationError = useCallback((message: string, details: any = {}) => {\n    const error = {\n      message,\n      type: ERROR_TYPES.VALIDATION_ERROR,\n      severity: 'medium',\n      details,\n      userMessage: message\n    };\n    return handleError(error, 'validation');\n  }, [handleError]);\n\n  const handleNetworkError = useCallback((message = 'Network connection failed') => {\n    const error = {\n      message,\n      type: ERROR_TYPES.NETWORK_ERROR,\n      severity: 'high',\n      userMessage: message\n    };\n    return handleError(error, 'network');\n  }, [handleError]);\n\n  const handleAuthError = useCallback((message = 'Authentication failed') => {\n    const error = {\n      message,\n      type: ERROR_TYPES.AUTHENTICATION_ERROR,\n      severity: 'high',\n      userMessage: message\n    };\n    return handleError(error, 'authentication');\n  }, [handleError]);\n\n  /**\n   * Clear all errors\n   */\n  const clearErrors = useCallback(() => {\n    setErrors([]);\n  }, []);\n\n  /**\n   * Clear specific error by ID\n   */\n  const clearError = useCallback((errorId: string) => {\n    setErrors(prev => prev.filter(error => error.id !== errorId));\n  }, []);\n\n  /**\n   * Get errors by type\n   */\n  const getErrorsByType = useCallback((type: ErrorType) => {\n    return errors.filter(error => error.type === type);\n  }, [errors]);\n\n  /**\n   * Check if there are any critical errors\n   */\n  const hasCriticalErrors = useCallback(() => {\n    return errors.some(error => error.severity === 'critical');\n  }, [errors]);\n\n  return {\n    // Error handling functions\n    handleError,\n    handleAsync,\n    handleValidationError,\n    handleNetworkError,\n    handleAuthError,\n    \n    // Error management\n    clearErrors,\n    clearError,\n    getErrorsByType,\n    hasCriticalErrors,\n    \n    // State\n    errors,\n    isRetrying,\n    retryCount: retryCountRef.current,\n    \n    // Utilities\n    retryOperation\n  };\n};\n\n/**\n * Hook for handling form validation errors\n */\nexport const useValidationErrorHandler = () => {\n  const { handleValidationError, clearErrors } = useErrorHandler({\n    showUserMessages: false // Don't show toast for validation errors\n  });\n\n  const handleFieldError = useCallback((field: string, message: string) => {\n    return handleValidationError(`Field '${field}': ${message}`, { field });\n  }, [handleValidationError]);\n\n  const handleRequiredFieldError = useCallback((field: string) => {\n    return handleValidationError(`Field '${field}' is required`, { field, type: 'required' });\n  }, [handleValidationError]);\n\n  return {\n    handleFieldError,\n    handleRequiredFieldError,\n    clearErrors\n  };\n};\n"],"mappings":"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","names":["options"]}